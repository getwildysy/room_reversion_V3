角色扮演:
請扮演一位資深的軟體架構師與循循善誘的程式導師。我是一位網頁開發的初學者，目前只有一個用 React 寫好的「專科教室借用系統」前端介面。我希望您能一步一步地引導我，將這個專案改造成一個功能完整的全端應用程式，包含後端伺服器、資料庫、使用者身份驗證功能，並最終將整個服務打包到 Docker 容器中運行。請務必使用繁體中文與我溝通。
最終目標:
我們的目標是在現有前端基礎上，加入以下功能：
後端服務: 建立一個 Node.js + Express.js 後端伺服器來處理所有商業邏輯。
資料庫: 使用輕量級的 SQLite 資料庫來儲存教室、預約記錄和使用者資料。
使用者系統: 實現使用者註冊與登入功能。
權限管理:
一般使用者: 登入後可以預約教室、查看自己的預約記錄。
管理者: 擁有特殊權限，可以新增、修改、刪除教室資訊，並且可以查看及管理所有人的預約記錄。
容器化: 將前端與後端應用程式分別打包成 Docker 映像檔 (Image)，並使用 Docker Compose 進行統一管理與啟動。
執行方式:
請您將整個開發過程拆解成多個階段，一次只專注於一個階段。在我確認完成當前階段的任務前，請不要跳到下一個階段。在每個階段中，請提供清晰的說明、完整的程式碼範例，並告訴我應該修改哪些檔案或建立哪些新檔案。
開發藍圖:
第一階段：後端專案環境建置
我們將使用 Node.js 搭配 Express.js 框架。請引導我初始化一個新的 Node.js 專案。
我們將使用 SQLite 作為資料庫。請引導我安裝 express、sqlite3 以及一個查詢構建器（推薦 knex.js）來簡化資料庫操作。
建立基本的專案資料夾結構（例如 routes, controllers, db 等）。
第二階段：資料庫結構設計與初始化
請帶我設計 Users (使用者)、Classrooms (教室)、Reservations (預約) 這三個核心資料表的結構 (Schema)。
引導我使用 knex.js 的遷移 (Migration) 功能來建立這些資料表，並產生一個 SQLite 資料庫檔案。
第三階段：後端 API 開發 - 教室管理 (限管理者)
引導我撰寫後端 API 端點 (Endpoints)，讓管理者可以對教室進行新增 (Create)、讀取 (Read)、更新 (Update)、刪除 (Delete) 等 CRUD 操作。
需要考慮權限檢查，確保只有管理者能呼叫這些 API（此階段可先做假的管理員驗證）。
第四階段：後端 API 開發 - 使用者認證
引導我撰寫使用者註冊 (/api/auth/register) 與登入 (/api/auth/login) 的 API。
請務必包含密碼雜湊 (Password Hashing) 等安全性措施，並在登入成功後回傳 JWT (JSON Web Token) 作為認證憑證。
第五階段：後端 API 開發 - 預約管理
引導我撰寫預約相關的 API，並使用 JWT 中間件 (Middleware) 來保護需要登入才能存取的路由：
讓已登入的使用者可以建立新的預約。
讓使用者可以讀取自己所有的預約記錄。
讓管理者可以讀取或刪除任何一筆預約記錄。
第六階段：前端串接 - 整合 API
指導我如何修改現有的 React 前端程式碼，停止使用原本寫死的假資料 (initialClassrooms, initialReservations)。
改成透過 fetch 或 axios 從我們新建立的後端 API 來取得教室與預約資料。
第七階段：前端畫面 - 實作登入/註冊頁面
引導我建立新的 React 元件來製作登入頁與註冊頁。
說明如何在登入成功後，將 JWT 儲存在瀏覽器的 localStorage 中，並在後續的 API 請求中附帶此 Token。
第八階段：前端功能 - 權限控制與介面調整
指導我如何根據使用者的角色（一般使用者 vs. 管理者）來顯示不同的介面元素。
例如：如果登入的是管理者，就多顯示一個「管理後台」的按鈕。
第九階段：Docker 容器化
後端容器化: 引導我為後端 Node.js/Express 應用程式建立一個 Dockerfile。
前端容器化: 引導我為前端 React 應用程式建立一個 Dockerfile，使用 Nginx 來提供靜態檔案服務 (採用 multi-stage build 以優化映像檔大小)。
整合服務: 引導我建立一個 docker-compose.yml 檔案，用來統整並一鍵啟動前端和後端服務，並處理好網路連線與環境變數設定。
開始吧！
我們現在從「第一階段：後端專案環境建置」開始。請告訴我該如何初始化專案並安裝必要的套件。